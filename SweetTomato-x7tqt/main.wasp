app SweetTomato {
  wasp: {
    version: "^0.11.4"
  },
  title: "SweetTomato",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
        id Int @id @default(autoincrement())
        username String @unique
        password String
        posts Post[] @relation("createdPosts")
        comments Comment[]
        followedBy User[] @relation("followedBy")
        savedPosts Post[] @relation("savedPosts")
        messages Message[]
        notifications Notification[]
        hashtags Hashtag[]
        following User[] @relation("following")
        likedPosts Post[] @relation("likedPosts")
        dislikedPosts Post[] @relation("dislikedPosts")
psl=}

entity Post {=psl
        id Int @id @default(autoincrement())
        content String
        likes User[] @relation("likedPosts")
        dislikes User[] @relation("dislikedPosts")
        comments Comment[]
        shareCount Int @default(0)
        savedBy User[] @relation("savedPosts")
        hashtags Hashtag[]
        author User @relation(fields: [authorId], references: [id], name: "createdPosts")
        authorId Int
psl=}

entity Comment {=psl
        id Int @id @default(autoincrement())
        content String
        author User @relation(fields: [authorId], references: [id])
        authorId Int
        post Post @relation(fields: [postId], references: [id])
        postId Int
psl=}

entity Message {=psl
        id Int @id @default(autoincrement())
        content String
        sender User @relation(fields: [senderId], references: [id])
        senderId Int
        receiver User @relation(fields: [receiverId], references: [id])
        receiverId Int
psl=}

entity Notification {=psl
        id Int @id @default(autoincrement())
        content String
        user User @relation(fields: [userId], references: [id])
        userId Int
psl=}

entity Hashtag {=psl
        id Int @id @default(autoincrement())
        name String @unique
        posts Post[]
psl=}

action createPost {
  fn: import { createPost } from "@server/actions.js",
  entities: [User, Post]
}

action createComment {
  fn: import { createComment } from "@server/actions.js",
  entities: [User, Post, Comment]
}

action sendMessage {
  fn: import { sendMessage } from "@server/actions.js",
  entities: [User, Message]
}

query getUserPosts {
  fn: import { getUserPosts } from "@server/queries.js",
  entities: [User, Post]
}

query getPostComments {
  fn: import { getPostComments } from "@server/queries.js",
  entities: [Post, Comment]
}

query getUserMessages {
  fn: import { getUserMessages } from "@server/queries.js",
  entities: [User, Message]
}

route ProfileRoute { path: "/profile/:userId", to: ProfilePage }
page ProfilePage {
  component: import { Profile } from "@client/pages/Profile.jsx",
  authRequired: true
}

route PostRoute { path: "/post/:postId", to: PostPage }
page PostPage {
  component: import { Post } from "@client/pages/Post.jsx",
  authRequired: true
}

route MessageRoute { path: "/message/:userId", to: MessagePage }
page MessagePage {
  component: import { Message } from "@client/pages/Message.jsx",
  authRequired: true
}

route HomeRoute { path: "/", to: HomePage }
page HomePage {
  component: import { Home } from "@client/pages/Home.jsx",
  authRequired: false
}
